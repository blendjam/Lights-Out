{"version":3,"sources":["LightBox.js","LightGrid.js","LightsOut.js","App.js","serviceWorker.js","index.js"],"names":["LightBox","className","this","props","isON","onClick","id","Component","LightGrid","state","createBoard","isWinner","changeColor","indexValue","rows","cols","board","i","j","flipCell","hasWon","every","row","e","setState","handleClick","target","split","parseInt","push","Math","floor","random","map","key","defaultProps","LightsOut","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAEqBA,G,6KAEb,OACI,yBAAKC,UAAS,mBACEC,KAAKC,MAAMC,KAAO,KAAO,IACrCC,QAASH,KAAKC,MAAME,QACpBC,GAAIJ,KAAKC,MAAMG,S,GANOC,cCCjBC,E,4MAMjBC,MAAQ,CACJL,KAAM,EAAKM,cACXC,UAAU,G,EAiBdC,YAAc,SAACC,GAAgB,IAAD,EACL,EAAKV,MAApBW,EADoB,EACpBA,KAAMC,EADc,EACdA,KACRC,EAAQ,EAAKP,MAAML,KACjBa,EAASJ,EAATI,EAAGC,EAAML,EAANK,EAET,SAASC,EAASF,EAAGC,GACbD,GAAK,GAAKA,EAAIH,GAAQI,GAAK,GAAKA,EAAIH,IACpCC,EAAMC,GAAGC,IAAMF,EAAMC,GAAGC,IAGhCC,EAASF,EAAGC,GACZC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAI,EAAGC,GAEhB,IAAIE,EAASJ,EAAMK,OAAM,SAAAC,GAAG,OAAIA,EAAID,OAAM,SAAAE,GAAC,OAAKA,QAEhD,EAAKC,SAAS,CAAEpB,KAAMY,EAAOL,SAAUS,K,EAI3CK,YAAc,SAACF,GACX,IAAIV,EAAaU,EAAEG,OAAOpB,GAAGqB,MAAM,KACnCd,EAAa,CACTI,EAAGW,SAASf,EAAW,IACvBK,EAAGU,SAASf,EAAW,KAG3B,EAAKD,YAAYC,I,4DAxCjB,IAFA,IAAIG,EAAQ,GAEHC,EAAI,EAAGA,EAAIf,KAAKC,MAAMW,KAAMG,IAAK,CAEtC,IADA,IAAIH,EAAO,GACFI,EAAI,EAAGA,EAAIhB,KAAKC,MAAMY,KAAMG,IACjCJ,EAAKe,KAAKC,KAAKC,MAAsB,EAAhBD,KAAKE,WAE9BhB,EAAMa,KAAKf,GAGf,OAAOE,I,+BAmCD,IAAD,OACDA,EAAQd,KAAKO,MAAML,KAAK6B,KAAI,SAACnB,EAAMG,GAAP,OAC5BH,EAAKmB,KAAI,SAACV,EAAGL,GAAJ,OACL,kBAAC,EAAD,CACId,KAAMmB,EACNjB,GAAE,UAAKW,EAAL,YAAUC,GACZgB,IAAG,UAAKjB,EAAL,YAAUC,GACbb,QAAS,EAAKoB,oBAI1B,OACI,6BAEQvB,KAAKO,MAAME,SACL,wCACA,yBAAKV,UAAU,cACZe,Q,GA1EUT,aAAlBC,EACV2B,aAAe,CAClBrB,KAAM,EACNC,KAAM,G,ICFOqB,E,uKAEb,OACI,6BACI,sCACA,wBAAInC,UAAU,OAAd,OACA,kBAAC,EAAD,W,GANuBM,aCFlB8B,E,uKAGb,OACI,yBAAKpC,UAAU,OAEf,kBAAC,EAAD,W,GANqBM,aCUb+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SD2HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9c074b15.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class LightBox extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\r\n                `LightBox ${this.props.isON ? \"ON\" : \"\"}`}\r\n                onClick={this.props.onClick}\r\n                id={this.props.id}\r\n                >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport LightBox from './LightBox';\r\n\r\nexport default class LightGrid extends Component {\r\n    static defaultProps = {\r\n        rows: 5,\r\n        cols: 5\r\n    }\r\n\r\n    state = {\r\n        isON: this.createBoard(),\r\n        isWinner: false\r\n    }\r\n\r\n    createBoard() {\r\n        let board = [];\r\n\r\n        for (let i = 0; i < this.props.rows; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < this.props.cols; j++) {\r\n                rows.push(Math.floor(Math.random() * 2));\r\n            }\r\n            board.push(rows);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    changeColor = (indexValue) => {\r\n        let { rows, cols } = this.props;\r\n        let board = this.state.isON;\r\n        let { i, j } = indexValue;\r\n\r\n        function flipCell(i, j) {\r\n            if (i >= 0 && i < rows && j >= 0 && j < cols)\r\n                board[i][j] = !board[i][j];\r\n        }\r\n\r\n        flipCell(i, j);\r\n        flipCell(i, j - 1);\r\n        flipCell(i, j + 1);\r\n        flipCell(i + 1, j);\r\n        flipCell(i - 1, j);\r\n\r\n        let hasWon = board.every(row => row.every(e => !e));\r\n\r\n        this.setState({ isON: board, isWinner: hasWon })\r\n\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        let indexValue = e.target.id.split(\"-\");\r\n        indexValue = {\r\n            i: parseInt(indexValue[0]),\r\n            j: parseInt(indexValue[1]),\r\n        }\r\n\r\n        this.changeColor(indexValue);\r\n    }\r\n\r\n    render() {\r\n        let board = this.state.isON.map((rows, i) => (\r\n            rows.map((e, j) => (\r\n                <LightBox\r\n                    isON={e}\r\n                    id={`${i}-${j}`}\r\n                    key={`${i}-${j}`}\r\n                    onClick={this.handleClick}\r\n                />\r\n            ))\r\n        ))\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.isWinner\r\n                        ? <h1> Winner </h1>\r\n                        : <div className=\"LightsGrid\"> \r\n                            {board}\r\n                        </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './LightsOut.css';\r\nimport LightGrid from './LightGrid';\r\n\r\nexport default class LightsOut extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Lights</h2>\r\n                <h1 className=\"out\">Out</h1>\r\n                <LightGrid />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport LightsOut from './LightsOut';\r\nexport default class App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n            <LightsOut />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}